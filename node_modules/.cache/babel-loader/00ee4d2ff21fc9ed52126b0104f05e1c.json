{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useRef } from 'react';\nexport function useKeyPress(target, event) {\n  _s();\n\n  useEffect(function () {\n    var downHandler = function downHandler(_ref) {\n      var key = _ref.key;\n      return target.indexOf(key) !== -1 && event(true);\n    };\n\n    var upHandler = function upHandler(_ref2) {\n      var key = _ref2.key;\n      return target.indexOf(key) !== -1 && event(false);\n    };\n\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    return function () {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, []);\n}\n\n_s(useKeyPress, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport function useControls() {\n  _s2();\n\n  var keys = useRef({\n    forward: false,\n    backward: false,\n    left: false,\n    right: false,\n    brake: false,\n    reset: false\n  });\n  useKeyPress(['ArrowUp', 'w'], function (pressed) {\n    return keys.current.forward = pressed;\n  });\n  useKeyPress(['ArrowDown', 's'], function (pressed) {\n    return keys.current.backward = pressed;\n  });\n  useKeyPress(['ArrowLeft', 'a'], function (pressed) {\n    return keys.current.left = pressed;\n  });\n  useKeyPress(['ArrowRight', 'd'], function (pressed) {\n    return keys.current.right = pressed;\n  });\n  useKeyPress([' '], function (pressed) {\n    return keys.current.brake = pressed;\n  });\n  useKeyPress(['r'], function (pressed) {\n    return keys.current.reset = pressed;\n  });\n  return keys;\n}\n\n_s2(useControls, \"vwpOTXqmnJhuwVarno+qyjbtO5w=\", false, function () {\n  return [useKeyPress, useKeyPress, useKeyPress, useKeyPress, useKeyPress, useKeyPress];\n});","map":{"version":3,"sources":["C:/Users/Home/Downloads/raycast-vehicle/src/utils/useControls.js"],"names":["useEffect","useRef","useKeyPress","target","event","downHandler","key","indexOf","upHandler","window","addEventListener","removeEventListener","useControls","keys","forward","backward","left","right","brake","reset","pressed","current"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AAEA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,KAA7B,EAAoC;AAAA;;AACzCJ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMK,WAAW,GAAG,SAAdA,WAAc;AAAA,UAAGC,GAAH,QAAGA,GAAH;AAAA,aAAaH,MAAM,CAACI,OAAP,CAAeD,GAAf,MAAwB,CAAC,CAAzB,IAA8BF,KAAK,CAAC,IAAD,CAAhD;AAAA,KAApB;;AACA,QAAMI,SAAS,GAAG,SAAZA,SAAY;AAAA,UAAGF,GAAH,SAAGA,GAAH;AAAA,aAAaH,MAAM,CAACI,OAAP,CAAeD,GAAf,MAAwB,CAAC,CAAzB,IAA8BF,KAAK,CAAC,KAAD,CAAhD;AAAA,KAAlB;;AACAK,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCL,WAAnC;AACAI,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCF,SAAjC;AACA,WAAO,YAAM;AACXC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCN,WAAtC;AACAI,MAAAA,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCH,SAApC;AACD,KAHD;AAID,GATQ,EASN,EATM,CAAT;AAUD;;GAXeN,W;;AAahB,OAAO,SAASU,WAAT,GAAuB;AAAA;;AAC5B,MAAMC,IAAI,GAAGZ,MAAM,CAAC;AAAEa,IAAAA,OAAO,EAAE,KAAX;AAAkBC,IAAAA,QAAQ,EAAE,KAA5B;AAAmCC,IAAAA,IAAI,EAAE,KAAzC;AAAgDC,IAAAA,KAAK,EAAE,KAAvD;AAA8DC,IAAAA,KAAK,EAAE,KAArE;AAA4EC,IAAAA,KAAK,EAAE;AAAnF,GAAD,CAAnB;AACAjB,EAAAA,WAAW,CAAC,CAAC,SAAD,EAAY,GAAZ,CAAD,EAAmB,UAACkB,OAAD;AAAA,WAAcP,IAAI,CAACQ,OAAL,CAAaP,OAAb,GAAuBM,OAArC;AAAA,GAAnB,CAAX;AACAlB,EAAAA,WAAW,CAAC,CAAC,WAAD,EAAc,GAAd,CAAD,EAAqB,UAACkB,OAAD;AAAA,WAAcP,IAAI,CAACQ,OAAL,CAAaN,QAAb,GAAwBK,OAAtC;AAAA,GAArB,CAAX;AACAlB,EAAAA,WAAW,CAAC,CAAC,WAAD,EAAc,GAAd,CAAD,EAAqB,UAACkB,OAAD;AAAA,WAAcP,IAAI,CAACQ,OAAL,CAAaL,IAAb,GAAoBI,OAAlC;AAAA,GAArB,CAAX;AACAlB,EAAAA,WAAW,CAAC,CAAC,YAAD,EAAe,GAAf,CAAD,EAAsB,UAACkB,OAAD;AAAA,WAAcP,IAAI,CAACQ,OAAL,CAAaJ,KAAb,GAAqBG,OAAnC;AAAA,GAAtB,CAAX;AACAlB,EAAAA,WAAW,CAAC,CAAC,GAAD,CAAD,EAAQ,UAACkB,OAAD;AAAA,WAAcP,IAAI,CAACQ,OAAL,CAAaH,KAAb,GAAqBE,OAAnC;AAAA,GAAR,CAAX;AACAlB,EAAAA,WAAW,CAAC,CAAC,GAAD,CAAD,EAAQ,UAACkB,OAAD;AAAA,WAAcP,IAAI,CAACQ,OAAL,CAAaF,KAAb,GAAqBC,OAAnC;AAAA,GAAR,CAAX;AACA,SAAOP,IAAP;AACD;;IATeD,W;UAEdV,W,EACAA,W,EACAA,W,EACAA,W,EACAA,W,EACAA,W","sourcesContent":["import { useEffect, useRef } from 'react'\n\nexport function useKeyPress(target, event) {\n  useEffect(() => {\n    const downHandler = ({ key }) => target.indexOf(key) !== -1 && event(true)\n    const upHandler = ({ key }) => target.indexOf(key) !== -1 && event(false)\n    window.addEventListener('keydown', downHandler)\n    window.addEventListener('keyup', upHandler)\n    return () => {\n      window.removeEventListener('keydown', downHandler)\n      window.removeEventListener('keyup', upHandler)\n    }\n  }, [])\n}\n\nexport function useControls() {\n  const keys = useRef({ forward: false, backward: false, left: false, right: false, brake: false, reset: false })\n  useKeyPress(['ArrowUp', 'w'], (pressed) => (keys.current.forward = pressed))\n  useKeyPress(['ArrowDown', 's'], (pressed) => (keys.current.backward = pressed))\n  useKeyPress(['ArrowLeft', 'a'], (pressed) => (keys.current.left = pressed))\n  useKeyPress(['ArrowRight', 'd'], (pressed) => (keys.current.right = pressed))\n  useKeyPress([' '], (pressed) => (keys.current.brake = pressed))\n  useKeyPress(['r'], (pressed) => (keys.current.reset = pressed))\n  return keys\n}\n"]},"metadata":{},"sourceType":"module"}