{"ast":null,"code":"import _objectWithoutProperties from \"C:/Users/Home/Downloads/raycast-vehicle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"makeDefault\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useThree } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nvar PerspectiveCamera = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _ref$makeDefault = _ref.makeDefault,\n      makeDefault = _ref$makeDefault === void 0 ? false : _ref$makeDefault,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var set = useThree(function (_ref2) {\n    var set = _ref2.set;\n    return set;\n  });\n  var camera = useThree(function (_ref3) {\n    var camera = _ref3.camera;\n    return camera;\n  });\n  var size = useThree(function (_ref4) {\n    var size = _ref4.size;\n    return size;\n  });\n  var cameraRef = React.useRef();\n  React.useLayoutEffect(function () {\n    var cam = cameraRef.current;\n\n    if (cam) {\n      cam.aspect = size.width / size.height;\n      cam.updateProjectionMatrix();\n    }\n  }, [size, props]);\n  React.useLayoutEffect(function () {\n    if (makeDefault && cameraRef.current) {\n      var oldCam = camera;\n      set(function () {\n        return {\n          camera: cameraRef.current\n        };\n      });\n      return function () {\n        return set(function () {\n          return {\n            camera: oldCam\n          };\n        });\n      };\n    }\n  }, [camera, cameraRef, makeDefault, set]);\n  return /*#__PURE__*/React.createElement(\"perspectiveCamera\", _extends({\n    ref: mergeRefs([cameraRef, ref])\n  }, props));\n});\nexport { PerspectiveCamera };","map":{"version":3,"sources":["C:/Users/Home/Downloads/raycast-vehicle/node_modules/@react-three/drei/core/PerspectiveCamera.js"],"names":["_extends","React","useThree","mergeRefs","PerspectiveCamera","forwardRef","ref","makeDefault","props","set","camera","size","cameraRef","useRef","useLayoutEffect","cam","current","aspect","width","height","updateProjectionMatrix","oldCam","createElement"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AAEA,IAAMC,iBAAiB,GAAG,aAAaH,KAAK,CAACI,UAAN,CAAiB,gBAGrDC,GAHqD,EAG7C;AAAA,8BAFTC,WAES;AAAA,MAFTA,WAES,iCAFK,KAEL;AAAA,MADNC,KACM;;AACT,MAAMC,GAAG,GAAGP,QAAQ,CAAC;AAAA,QACnBO,GADmB,SACnBA,GADmB;AAAA,WAEfA,GAFe;AAAA,GAAD,CAApB;AAGA,MAAMC,MAAM,GAAGR,QAAQ,CAAC;AAAA,QACtBQ,MADsB,SACtBA,MADsB;AAAA,WAElBA,MAFkB;AAAA,GAAD,CAAvB;AAGA,MAAMC,IAAI,GAAGT,QAAQ,CAAC;AAAA,QACpBS,IADoB,SACpBA,IADoB;AAAA,WAEhBA,IAFgB;AAAA,GAAD,CAArB;AAGA,MAAMC,SAAS,GAAGX,KAAK,CAACY,MAAN,EAAlB;AACAZ,EAAAA,KAAK,CAACa,eAAN,CAAsB,YAAM;AAC1B,QACWC,GADX,GAEIH,SAFJ,CACEI,OADF;;AAIA,QAAID,GAAJ,EAAS;AACPA,MAAAA,GAAG,CAACE,MAAJ,GAAaN,IAAI,CAACO,KAAL,GAAaP,IAAI,CAACQ,MAA/B;AACAJ,MAAAA,GAAG,CAACK,sBAAJ;AACD;AACF,GATD,EASG,CAACT,IAAD,EAAOH,KAAP,CATH;AAUAP,EAAAA,KAAK,CAACa,eAAN,CAAsB,YAAM;AAC1B,QAAIP,WAAW,IAAIK,SAAS,CAACI,OAA7B,EAAsC;AACpC,UAAMK,MAAM,GAAGX,MAAf;AACAD,MAAAA,GAAG,CAAC;AAAA,eAAO;AACTC,UAAAA,MAAM,EAAEE,SAAS,CAACI;AADT,SAAP;AAAA,OAAD,CAAH;AAGA,aAAO;AAAA,eAAMP,GAAG,CAAC;AAAA,iBAAO;AACtBC,YAAAA,MAAM,EAAEW;AADc,WAAP;AAAA,SAAD,CAAT;AAAA,OAAP;AAGD;AACF,GAVD,EAUG,CAACX,MAAD,EAASE,SAAT,EAAoBL,WAApB,EAAiCE,GAAjC,CAVH;AAWA,SAAO,aAAaR,KAAK,CAACqB,aAAN,CAAoB,mBAApB,EAAyCtB,QAAQ,CAAC;AACpEM,IAAAA,GAAG,EAAEH,SAAS,CAAC,CAACS,SAAD,EAAYN,GAAZ,CAAD;AADsD,GAAD,EAElEE,KAFkE,CAAjD,CAApB;AAGD,CAtCsC,CAAvC;AAwCA,SAASJ,iBAAT","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useThree } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\n\nconst PerspectiveCamera = /*#__PURE__*/React.forwardRef(({\n  makeDefault = false,\n  ...props\n}, ref) => {\n  const set = useThree(({\n    set\n  }) => set);\n  const camera = useThree(({\n    camera\n  }) => camera);\n  const size = useThree(({\n    size\n  }) => size);\n  const cameraRef = React.useRef();\n  React.useLayoutEffect(() => {\n    const {\n      current: cam\n    } = cameraRef;\n\n    if (cam) {\n      cam.aspect = size.width / size.height;\n      cam.updateProjectionMatrix();\n    }\n  }, [size, props]);\n  React.useLayoutEffect(() => {\n    if (makeDefault && cameraRef.current) {\n      const oldCam = camera;\n      set(() => ({\n        camera: cameraRef.current\n      }));\n      return () => set(() => ({\n        camera: oldCam\n      }));\n    }\n  }, [camera, cameraRef, makeDefault, set]);\n  return /*#__PURE__*/React.createElement(\"perspectiveCamera\", _extends({\n    ref: mergeRefs([cameraRef, ref])\n  }, props));\n});\n\nexport { PerspectiveCamera };\n"]},"metadata":{},"sourceType":"module"}