import React, { createContext, useState, useRef, useMemo, useEffect, useContext, useLayoutEffect, Suspense } from 'react';
import { useThree, useFrame } from '@react-three/fiber';
import * as THREE from 'three';

const context = /*#__PURE__*/createContext({});

function decodeBase64(base64, enableUnicode) {
    var binaryString = atob(base64);
    if (enableUnicode) {
        var binaryView = new Uint8Array(binaryString.length);
        for (var i = 0, n = binaryString.length; i < n; ++i) {
            binaryView[i] = binaryString.charCodeAt(i);
        }
        return String.fromCharCode.apply(null, new Uint16Array(binaryView.buffer));
    }
    return binaryString;
}

function createURL(base64, sourcemapArg, enableUnicodeArg) {
    var sourcemap = sourcemapArg === undefined ? null : sourcemapArg;
    var enableUnicode = enableUnicodeArg === undefined ? false : enableUnicodeArg;
    var source = decodeBase64(base64, enableUnicode);
    var start = source.indexOf('\n', 10) + 1;
    var body = source.substring(start) + (sourcemap ? '\/\/# sourceMappingURL=' + sourcemap : '');
    var blob = new Blob([body], { type: 'application/javascript' });
    return URL.createObjectURL(blob);
}

function createBase64WorkerFactory(base64, sourcemapArg, enableUnicodeArg) {
    var url;
    return function WorkerFactory(options) {
        url = url || createURL(base64, sourcemapArg, enableUnicodeArg);
        return new Worker(url, options);
    };
}

var WorkerFactory = createBase64WorkerFactory('', 'data:application/json;charset=utf-8;base64,', false);
/* eslint-enable */

function Provider({
  children,
  step = 1 / 60,
  gravity = [0, -10, 0],
  tolerance = 0.001,
  iterations = 5,
  allowSleep = false,
  broadphase = 'Naive',
  axisIndex = 0,
  defaultContactMaterial = {
    contactEquationStiffness: 1e6
  },
  size = 1000
}) {
  const {
    gl,
    invalidate
  } = useThree();
  const [worker] = useState(() => new WorkerFactory());
  const [refs] = useState({});
  const [buffers] = useState(() => ({
    positions: new Float32Array(size * 3),
    quaternions: new Float32Array(size * 4)
  }));
  const [events] = useState({});
  const [subscriptions] = useState({});
  const bodies = useRef({});
  const loop = useMemo(() => () => {
    if (buffers.positions.byteLength !== 0 && buffers.quaternions.byteLength !== 0) {
      worker.postMessage({
        op: 'step',
        ...buffers
      }, [buffers.positions.buffer, buffers.quaternions.buffer]);
    }
  }, []);
  const prevPresenting = useRef(false);
  useFrame(() => {
    var _gl$xr, _gl$xr2, _gl$xr3;

    if ((_gl$xr = gl.xr) != null && _gl$xr.isPresenting && !prevPresenting.current) {
      gl.xr.getSession().requestAnimationFrame(loop);
    }

    if (!((_gl$xr2 = gl.xr) != null && _gl$xr2.isPresenting) && prevPresenting.current) {
      requestAnimationFrame(loop);
    }

    prevPresenting.current = (_gl$xr3 = gl.xr) == null ? void 0 : _gl$xr3.isPresenting;
  });
  useEffect(() => {
    worker.postMessage({
      op: 'init',
      props: {
        gravity,
        tolerance,
        step,
        iterations,
        broadphase,
        allowSleep,
        axisIndex,
        defaultContactMaterial
      }
    });

    worker.onmessage = e => {
      switch (e.data.op) {
        case 'frame':
          if (e.data.bodies) {
            bodies.current = e.data.bodies.reduce((acc, id) => ({ ...acc,
              [id]: e.data.bodies.indexOf(id)
            }), {});
          }

          buffers.positions = e.data.positions;
          buffers.quaternions = e.data.quaternions;
          e.data.observations.forEach(([id, value]) => subscriptions[id](value));

          if (gl.xr && gl.xr.isPresenting) {
            gl.xr.getSession().requestAnimationFrame(loop);
          } else {
            requestAnimationFrame(loop);
          }

          if (e.data.active) invalidate();
          break;

        case 'event':
          switch (e.data.type) {
            case 'collide':
              events[e.data.target]({ ...e.data,
                target: refs[e.data.target],
                body: refs[e.data.body]
              });
              break;

            case 'rayhit':
              events[e.data.ray.uuid]({ ...e.data,
                body: e.data.body ? refs[e.data.body] : null
              });
              break;
          }

          break;
      }
    };

    loop();
    return () => worker.terminate();
  }, []);
  const api = useMemo(() => ({
    worker,
    bodies,
    refs,
    buffers,
    events,
    subscriptions
  }), [worker, bodies, refs, buffers, events, subscriptions]);
  return /*#__PURE__*/React.createElement(context.Provider, {
    value: api
  }, children);
}

const temp = new THREE.Object3D();

function prepare(object, props, argFn) {
  props.args = argFn(props.args);
  object.userData = props.userData || {};
  object.position.set(...(props.position || [0, 0, 0]));
  object.rotation.set(...(props.rotation || [0, 0, 0]));
  return props;
}

function apply(object, index, buffers) {
  if (index !== undefined) {
    object.position.fromArray(buffers.positions, index * 3);
    object.quaternion.fromArray(buffers.quaternions, index * 4);
  }
}

let subscriptionGuid = 0;

function useBody(type, fn, argFn, fwdRef, deps = []) {
  const localRef = useRef(null);
  const ref = fwdRef ? fwdRef : localRef;
  const {
    worker,
    bodies,
    buffers,
    refs,
    events,
    subscriptions
  } = useContext(context);
  useLayoutEffect(() => {
    if (!ref.current) {
      // When the reference isn't used we create a stub
      // The body doesn't have a visual representation but can still be constrained
      ref.current = new THREE.Object3D();
    }

    const object = ref.current;
    const currentWorker = worker;
    let uuid = [object.uuid],
        props;

    if (object instanceof THREE.InstancedMesh) {
      // Why? Because @mrdoob did it in his example ...
      object.instanceMatrix.setUsage(THREE.DynamicDrawUsage);
      uuid = new Array(object.count).fill(0).map((_, i) => object.uuid + "/" + i);
      props = uuid.map((id, i) => {
        const props = prepare(temp, fn(i), argFn);
        temp.updateMatrix();
        object.setMatrixAt(i, temp.matrix);
        object.instanceMatrix.needsUpdate = true;
        return props;
      });
    } else props = [prepare(object, fn(0), argFn)];

    props.forEach((props, index) => {
      refs[uuid[index]] = object;

      if (props.onCollide) {
        events[uuid[index]] = props.onCollide;
        props.onCollide = true;
      }
    }); // Register on mount, unregister on unmount

    currentWorker.postMessage({
      op: 'addBodies',
      type,
      uuid,
      props
    });
    return () => {
      props.forEach((props, index) => {
        delete refs[uuid[index]];
        if (props.onCollide) delete events[uuid[index]];
      });
      currentWorker.postMessage({
        op: 'removeBodies',
        uuid
      });
    };
  }, deps); // eslint-disable-line react-hooks/exhaustive-deps

  useFrame(() => {
    if (ref.current && buffers.positions.length && buffers.quaternions.length) {
      if (ref.current instanceof THREE.InstancedMesh) {
        for (let i = 0; i < ref.current.count; i++) {
          const index = bodies.current[ref.current.uuid + "/" + i];

          if (index !== undefined) {
            apply(temp, index, buffers);
            temp.updateMatrix();
            ref.current.setMatrixAt(i, temp.matrix);
          }

          ref.current.instanceMatrix.needsUpdate = true;
        }
      } else apply(ref.current, bodies.current[ref.current.uuid], buffers);
    }
  });
  const api = useMemo(() => {
    const getUUID = index => index !== undefined ? ref.current.uuid + "/" + index : ref.current.uuid;

    const post = (op, index, props) => ref.current && worker.postMessage({
      op,
      uuid: getUUID(index),
      props
    });

    const subscribe = (type, index) => {
      return callback => {
        const id = subscriptionGuid++;
        subscriptions[id] = callback;
        post('subscribe', index, {
          id,
          type
        });
        return () => {
          delete subscriptions[id];
          post('unsubscribe', index, id);
        };
      };
    };

    const opString = (action, type) => action + type.charAt(0).toUpperCase() + type.slice(1);

    const makeVec = (type, index) => ({
      set: (x, y, z) => post(opString('set', type), index, [x, y, z]),
      copy: ({
        x,
        y,
        z
      }) => post(opString('set', type), index, [x, y, z]),
      subscribe: subscribe(type, index)
    });

    const makeAtomic = (type, index) => ({
      set: value => post(opString('set', type), index, value),
      subscribe: subscribe(type, index)
    });

    function makeApi(index) {
      return {
        // Vectors
        position: makeVec('position', index),
        rotation: makeVec('quaternion', index),
        velocity: makeVec('velocity', index),
        angularVelocity: makeVec('angularVelocity', index),
        linearFactor: makeVec('linearFactor', index),
        angularFactor: makeVec('angularFactor', index),
        // Atomic props
        mass: makeAtomic('mass', index),
        linearDamping: makeAtomic('linearDamping', index),
        angularDamping: makeAtomic('angularDamping', index),
        allowSleep: makeAtomic('allowSleep', index),
        sleepSpeedLimit: makeAtomic('sleepSpeedLimit', index),
        sleepTimeLimit: makeAtomic('sleepTimeLimit', index),
        collisionFilterGroup: makeAtomic('collisionFilterGroup', index),
        collisionFilterMask: makeAtomic('collisionFilterMask', index),
        collisionResponse: makeAtomic('collisionResponse', index),
        fixedRotation: makeAtomic('fixedRotation', index),
        userData: makeAtomic('userData', index),

        // Apply functions
        applyForce(force, worldPoint) {
          post('applyForce', index, [force, worldPoint]);
        },

        applyImpulse(impulse, worldPoint) {
          post('applyImpulse', index, [impulse, worldPoint]);
        },

        applyLocalForce(force, localPoint) {
          post('applyLocalForce', index, [force, localPoint]);
        },

        applyLocalImpulse(impulse, localPoint) {
          post('applyLocalImpulse', index, [impulse, localPoint]);
        }

      };
    }

    const cache = {};
    return { ...makeApi(undefined),
      at: index => cache[index] || (cache[index] = makeApi(index))
    };
  }, []);
  return [ref, api];
}

function usePlane(fn, fwdRef, deps) {
  return useBody('Plane', fn, () => [], fwdRef, deps);
}
function useBox(fn, fwdRef, deps) {
  return useBody('Box', fn, args => args || [1, 1, 1], fwdRef, deps);
}
function useCylinder(fn, fwdRef, deps) {
  return useBody('Cylinder', fn, args => args, fwdRef, deps);
}
function useHeightfield(fn, fwdRef, deps) {
  return useBody('Heightfield', fn, args => args, fwdRef, deps);
}
function useParticle(fn, fwdRef, deps) {
  return useBody('Particle', fn, () => [], fwdRef, deps);
}
function useSphere(fn, fwdRef, deps) {
  return useBody('Sphere', fn, radius => [radius != null ? radius : 1], fwdRef, deps);
}
function useTrimesh(fn, fwdRef, deps) {
  return useBody('Trimesh', fn, args => {
    return [args[0].map(v => v instanceof THREE.Vector3 ? [v.x, v.y, v.z] : v), args[1]];
  }, fwdRef, deps);
}
function useConvexPolyhedron(fn, fwdRef, deps) {
  return useBody('ConvexPolyhedron', fn, args => {
    return [args[0].map(v => v instanceof THREE.Vector3 ? [v.x, v.y, v.z] : v), args[1], args[2] && args[2].map(n => n instanceof THREE.Vector3 ? [n.x, n.y, n.z] : n)];
  }, fwdRef, deps);
}
function useCompoundBody(fn, fwdRef, deps) {
  return useBody('Compound', fn, args => args || [], fwdRef, deps);
}

function useConstraint(type, bodyA, bodyB, optns = {}, deps = []) {
  const {
    worker
  } = useContext(context);
  const uuid = THREE.MathUtils.generateUUID();
  const nullRef1 = useRef(null);
  const nullRef2 = useRef(null);
  bodyA = bodyA === undefined || bodyA === null ? nullRef1 : bodyA;
  bodyB = bodyB === undefined || bodyB === null ? nullRef2 : bodyB;
  useEffect(() => {
    if (bodyA.current && bodyB.current) {
      worker.postMessage({
        op: 'addConstraint',
        uuid,
        type,
        props: [bodyA.current.uuid, bodyB.current.uuid, optns]
      });
      return () => worker.postMessage({
        op: 'removeConstraint',
        uuid
      });
    }
  }, deps);
  const api = useMemo(() => {
    const enableDisable = {
      enable: () => worker.postMessage({
        op: 'enableConstraint',
        uuid
      }),
      disable: () => worker.postMessage({
        op: 'disableConstraint',
        uuid
      })
    };

    if (type === 'Hinge') {
      return { ...enableDisable,
        enableMotor: () => worker.postMessage({
          op: 'enableConstraintMotor',
          uuid
        }),
        disableMotor: () => worker.postMessage({
          op: 'disableConstraintMotor',
          uuid
        }),
        setMotorSpeed: value => worker.postMessage({
          op: 'setConstraintMotorSpeed',
          uuid,
          props: value
        }),
        setMotorMaxForce: value => worker.postMessage({
          op: 'setConstraintMotorMaxForce',
          uuid,
          props: value
        })
      };
    }

    return enableDisable;
  }, deps);
  return [bodyA, bodyB, api];
}

function usePointToPointConstraint(bodyA, bodyB, optns, deps = []) {
  return useConstraint('PointToPoint', bodyA, bodyB, optns, deps);
}
function useConeTwistConstraint(bodyA, bodyB, optns, deps = []) {
  return useConstraint('ConeTwist', bodyA, bodyB, optns, deps);
}
function useDistanceConstraint(bodyA, bodyB, optns, deps = []) {
  return useConstraint('Distance', bodyA, bodyB, optns, deps);
}
function useHingeConstraint(bodyA, bodyB, optns, deps = []) {
  return useConstraint('Hinge', bodyA, bodyB, optns, deps);
}
function useLockConstraint(bodyA, bodyB, optns, deps = []) {
  return useConstraint('Lock', bodyA, bodyB, optns, deps);
}
function useSpring(bodyA, bodyB, optns, deps = []) {
  const {
    worker,
    events
  } = useContext(context);
  const [uuid] = useState(() => THREE.MathUtils.generateUUID());
  const nullRef1 = useRef(null);
  const nullRef2 = useRef(null);
  bodyA = bodyA === undefined || bodyA === null ? nullRef1 : bodyA;
  bodyB = bodyB === undefined || bodyB === null ? nullRef2 : bodyB;
  useEffect(() => {
    if (bodyA.current && bodyB.current) {
      worker.postMessage({
        op: 'addSpring',
        uuid,
        props: [bodyA.current.uuid, bodyB.current.uuid, optns]
      });

      events[uuid] = () => {};

      return () => {
        worker.postMessage({
          op: 'removeSpring',
          uuid
        });
        delete events[uuid];
      };
    }
  }, deps);
  const api = useMemo(() => ({
    setStiffness: value => worker.postMessage({
      op: 'setSpringStiffness',
      props: value,
      uuid
    }),
    setRestLength: value => worker.postMessage({
      op: 'setSpringRestLength',
      props: value,
      uuid
    }),
    setDamping: value => worker.postMessage({
      op: 'setSpringDamping',
      props: value,
      uuid
    })
  }), deps);
  return [bodyA, bodyB, api];
}

function useRay(mode, options, callback, deps = []) {
  const {
    worker,
    events
  } = useContext(context);
  const [uuid] = useState(() => THREE.MathUtils.generateUUID());
  useEffect(() => {
    events[uuid] = callback;
    worker.postMessage({
      op: 'addRay',
      uuid,
      props: {
        mode,
        ...options
      }
    });
    return () => {
      worker.postMessage({
        op: 'removeRay',
        uuid
      });
      delete events[uuid];
    };
  }, deps);
}

function useRaycastClosest(options, callback, deps = []) {
  useRay('Closest', options, callback, deps);
}
function useRaycastAny(options, callback, deps = []) {
  useRay('Any', options, callback, deps);
}
function useRaycastAll(options, callback, deps = []) {
  useRay('All', options, callback, deps);
}
function useRaycastVehicle(fn, fwdRef) {
  const ref = fwdRef ? fwdRef : useRef(null);
  const {
    worker
  } = useContext(context);
  useLayoutEffect(() => {
    var _raycastVehicleProps$;

    if (!ref.current) {
      // When the reference isn't used we create a stub
      // The body doesn't have a visual representation but can still be constrained
      ref.current = new THREE.Object3D();
    }

    const currentWorker = worker;
    let uuid = [ref.current.uuid];
    const raycastVehicleProps = fn();
    currentWorker.postMessage({
      op: 'addRaycastVehicle',
      uuid,
      props: [(_raycastVehicleProps$ = raycastVehicleProps.chassisBody.current) == null ? void 0 : _raycastVehicleProps$.uuid, raycastVehicleProps.wheels.map(wheel => {
        var _wheel$current;

        return (_wheel$current = wheel.current) == null ? void 0 : _wheel$current.uuid;
      }), raycastVehicleProps.wheelInfos, (raycastVehicleProps == null ? void 0 : raycastVehicleProps.indexForwardAxis) || 2, (raycastVehicleProps == null ? void 0 : raycastVehicleProps.indexRightAxis) || 0, (raycastVehicleProps == null ? void 0 : raycastVehicleProps.indexUpAxis) || 1]
    });
    return () => {
      currentWorker.postMessage({
        op: 'removeRaycastVehicle',
        uuid
      });
    };
  }, []);
  const api = useMemo(() => {
    const post = (op, props) => ref.current && worker.postMessage({
      op,
      uuid: ref.current.uuid,
      props
    });

    return {
      setSteeringValue(value, wheelIndex) {
        post('setRaycastVehicleSteeringValue', [value, wheelIndex]);
      },

      applyEngineForce(value, wheelIndex) {
        post('applyRaycastVehicleEngineForce', [value, wheelIndex]);
      },

      setBrake(brake, wheelIndex) {
        post('setRaycastVehicleBrake', [brake, wheelIndex]);
      }

    };
  }, []);
  return [ref, api];
}

function Physics(props) {
  return /*#__PURE__*/React.createElement(Suspense, {
    fallback: null
  }, /*#__PURE__*/React.createElement(Provider, props));
}

export { Physics, context, useBox, useCompoundBody, useConeTwistConstraint, useConvexPolyhedron, useCylinder, useDistanceConstraint, useHeightfield, useHingeConstraint, useLockConstraint, useParticle, usePlane, usePointToPointConstraint, useRaycastAll, useRaycastAny, useRaycastClosest, useRaycastVehicle, useSphere, useSpring, useTrimesh };
